C
C     FFTE: A FAST FOURIER TRANSFORM PACKAGE
C
C     (C) COPYRIGHT SOFTWARE, 2000-2004, 2008, ALL RIGHTS RESERVED
C                BY
C         DAISUKE TAKAHASHI
C         GRADUATE SCHOOL OF SYSTEMS AND INFORMATION ENGINEERING
C         UNIVERSITY OF TSUKUBA
C         1-1-1 TENNODAI, TSUKUBA, IBARAKI 305-8573, JAPAN
C         E-MAIL: daisuke@cs.tsukuba.ac.jp
C
C
C     PARALLEL 1-D COMPLEX FFT ROUTINE (FOR VECTOR MACHINES)
C
C     FORTRAN77 + MPI SOURCE PROGRAM
C
C     CALL PZFFT1D(A,B,W,N,ICOMM,ME,NPU,IOPT)
C
C     W(N/NPU) IS SINE/COSINE TABLE (COMPLEX*16)
C     N IS THE LENGTH OF THE TRANSFORMS (INTEGER*8)
C       -----------------------------------
C         N = (2**IP) * (3**IQ) * (5**IR)
C       -----------------------------------
C     ICOMM IS THE COMMUNICATOR (INTEGER*4)
C     ME IS THE RANK (INTEGER*4)
C     NPU IS THE NUMBER OF PROCESSORS (INTEGER*4)
C     IOPT = 0 FOR INITIALIZING THE COEFFICIENTS (INTEGER*4)
C     IOPT = -1 FOR FORWARD TRANSFORM WHERE
C              A(N/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK)
C              B(N/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK)
C     IOPT = +1 FOR INVERSE TRANSFORM WHERE
C              A(N/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK)
C              B(N/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK)
C     IOPT = -2 FOR FORWARD TRANSFORM WHERE
C              A(N/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK)
C              B(N/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(CYCLIC)
C     IOPT = +2 FOR INVERSE TRANSFORM WHERE
C              A(N/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(CYCLIC)
C              B(N/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK)
C
C     WRITTEN BY DAISUKE TAKAHASHI
C
      SUBROUTINE PZFFT1D(A,B,W,N,ICOMM,ME,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'mpif.h'
      INCLUDE 'param.h'
      COMPLEX*16 A(*),B(*),W(*)
      COMPLEX*16 WX(NDA2),WY(NDA2)
      DIMENSION IP(3),LNX(3),LNY(3),LNPU(3)
      INTEGER*8 N
      SAVE WX,WY
C
      NN=N/NPU
C
      CALL FACTOR(NPU,LNPU)
      CALL FACTOR8(N,IP)
      DO 10 I=1,3
        LNX(I)=MAX0(LNPU(I),(IP(I)+1)/2)
        LNY(I)=IP(I)-LNX(I)
   10 CONTINUE
      NX=(2**LNX(1))*(3**LNX(2))*(5**LNX(3))
      NY=(2**LNY(1))*(3**LNY(2))*(5**LNY(3))
C
      IF (IOPT .EQ. 0) THEN
        CALL SETTBL(WX,NX)
        CALL SETTBL(WY,NY)
        CALL PSETTBL2(W,NX,NY,ME,NPU)
        RETURN
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DO 20 I=1,NN
          A(I)=DCONJG(A(I))
   20   CONTINUE
      END IF
C
      IF (IOPT .EQ. -1 .OR. IOPT .EQ. 1 .OR. IOPT .EQ. -2) THEN
        CALL ZTRANS(A,B,NPU,NN/NPU)
        CALL MPI_ALLTOALL(B,NN/NPU,MPI_DOUBLE_COMPLEX,
     1                    A,NN/NPU,MPI_DOUBLE_COMPLEX,
     2                    ICOMM,IERR)
      END IF
C
      CALL MFFT235A(A,B,WY,NX/NPU,NY,LNY)
      CALL MZMUL(A,W,NN)
      CALL ZTRANS(A,B,NX,NY/NPU)
      CALL MPI_ALLTOALL(B,NN/NPU,MPI_DOUBLE_COMPLEX,
     1                  A,NN/NPU,MPI_DOUBLE_COMPLEX,
     2                  ICOMM,IERR)
      CALL MZTRANSA(A,B,NY/NPU,NX/NPU,NPU)
      CALL MFFT235A(B,A,WX,NY/NPU,NX,LNX)
C
      IF (IOPT .EQ. -1 .OR. IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        CALL MPI_ALLTOALL(B,NN/NPU,MPI_DOUBLE_COMPLEX,
     1                    A,NN/NPU,MPI_DOUBLE_COMPLEX,
     2                    ICOMM,IERR)
        CALL ZTRANS(A,B,NN/NPU,NPU)
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DN=1.0D0/DBLE(N)
        DO 30 I=1,NN
          B(I)=DCONJG(B(I))*DN
   30   CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE MZMUL(A,W,NN)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMPLEX*16 A(*),W(*)
C
      DO 10 I=1,NN
        A(I)=A(I)*W(I)
   10 CONTINUE
      RETURN
      END
      SUBROUTINE PSETTBL2(W,NX,NY,ME,NPU)
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION W(2,NX/NPU,*)
C
      PI2=8.0D0*DATAN(1.0D0)
      PX=-PI2/(DBLE(NX)*DBLE(NY))
      DO 20 K=1,NY
        DO 10 J=1,NX/NPU
          W(1,J,K)=DCOS(PX*(DBLE(ME)+DBLE(J-1)*DBLE(NPU))*DBLE(K-1))
          W(2,J,K)=DSIN(PX*(DBLE(ME)+DBLE(J-1)*DBLE(NPU))*DBLE(K-1))
   10   CONTINUE
   20 CONTINUE
      RETURN
      END
