C
C     FFTE: A FAST FOURIER TRANSFORM PACKAGE
C
C     (C) COPYRIGHT SOFTWARE, 2000-2004, ALL RIGHTS RESERVED
C                BY
C         DAISUKE TAKAHASHI
C         GRADUATE SCHOOL OF SYSTEMS AND INFORMATION ENGINEERING
C         UNIVERSITY OF TSUKUBA
C         1-1-1 TENNODAI, TSUKUBA, IBARAKI 305-8573, JAPAN
C         E-MAIL: daisuke@cs.tsukuba.ac.jp
C
C
C     PARALLEL 2-D COMPLEX FFT ROUTINE (FOR VECTOR MACHINES)
C
C     FORTRAN77 + MPI SOURCE PROGRAM
C
C     CALL PZFFT2D(A,B,NX,NY,ICOMM,NPU,IOPT)
C
C     NX IS THE LENGTH OF THE TRANSFORMS IN THE X-DIRECTION (INTEGER*4)
C     NY IS THE LENGTH OF THE TRANSFORMS IN THE Y-DIRECTION (INTEGER*4)
C       ------------------------------------
C         NX = (2**IP) * (3**IQ) * (5**IR)
C         NY = (2**JP) * (3**JQ) * (5**JR)
C       ------------------------------------
C     ICOMM IS THE COMMUNICATOR (INTEGER*4)
C     NPU IS THE NUMBER OF PROCESSORS (INTEGER*4)
C     IOPT = 0 FOR INITIALIZING THE COEFFICIENTS (INTEGER*4)
C     IOPT = -1 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK)
C              B(NX,NY/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK)
C     IOPT = +1 FOR INVERSE TRANSFORM WHERE
C              A(NX,NY/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK)
C              B(NX,NY/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK)
C     IOPT = -2 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY/NPU) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK)
C              B(NX/NPU,NY) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK,*)
C     IOPT = +2 FOR INVERSE TRANSFORM WHERE
C              A(NX/NPU,NY) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK,*)
C              B(NX,NY/NPU) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK)
C
C     WRITTEN BY DAISUKE TAKAHASHI
C
      SUBROUTINE PZFFT2D(A,B,NX,NY,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'param.h'
      COMPLEX*16 A(*),B(*)
      COMPLEX*16 WX(NDA2/2+NP),WY(NDA2/2+NP)
      SAVE WX,WY
      INTEGER*8 NN
C
      NN=INT8(NX)*INT8(NY)/INT8(NPU)
C
      IF (IOPT .EQ. 0) THEN
        CALL SETTBL(WX,NX)
        CALL SETTBL(WY,NY)
        RETURN
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DO 10 I=1,NN
          A(I)=DCONJG(A(I))
   10   CONTINUE
      END IF
C
      IF (IOPT .EQ. -1 .OR. IOPT .EQ. -2) THEN
        CALL PZFFT2DF(A,B,WX,WY,NX,NY,ICOMM,NPU,IOPT)
      ELSE
        CALL PZFFT2DB(A,B,WX,WY,NX,NY,ICOMM,NPU,IOPT)
      END IF
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DN=1.0D0/(DBLE(NX)*DBLE(NY))
        DO 20 I=1,NN
          B(I)=DCONJG(B(I))*DN
   20   CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE PZFFT2DF(A,B,WX,WY,NX,NY,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMPLEX*16 A(*),B(*)
      COMPLEX*16 WX(*),WY(*)
      DIMENSION LNX(3),LNY(3)
      INTEGER*8 NN
C
      CALL FACTOR(NX,LNX)
      CALL FACTOR(NY,LNY)
C
      NNX=NX/NPU
      NNY=NY/NPU
      NN=INT8(NX)*INT8(NY)/INT8(NPU)
C
      CALL ZTRANS(A,B,NX,NNY)
      CALL MFFT235A(B,A,WX,NNY,NX,LNX)
      CALL PZTRANS(B,A,NN,ICOMM,NPU)
      CALL MZTRANSB(A,B,NNY,NNX,NPU)
      CALL MFFT235A(B,A,WY,NNX,NY,LNY)
      IF (IOPT .EQ. -2) RETURN
      CALL PZTRANS(B,A,NN,ICOMM,NPU)
      CALL MZTRANSA(A,B,NNX,NNY,NPU)
      RETURN
      END
      SUBROUTINE PZFFT2DB(A,B,WX,WY,NX,NY,ICOMM,NPU,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMPLEX*16 A(*),B(*)
      COMPLEX*16 WX(*),WY(*)
      DIMENSION LNX(3),LNY(3)
      INTEGER*8 NN
C
      CALL FACTOR(NX,LNX)
      CALL FACTOR(NY,LNY)
C
      NNX=NX/NPU
      NNY=NY/NPU
      NN=INT8(NX)*INT8(NY)/INT8(NPU)
C
      IF (IOPT .EQ. 1) THEN
        CALL MZTRANSA(A,B,NNX,NPU,NNY)
        CALL PZTRANS(B,A,NN,ICOMM,NPU)
      END IF
C
      CALL MFFT235A(A,B,WY,NNX,NY,LNY)
      CALL MZTRANSB(A,B,NNX,NNY,NPU)
      CALL PZTRANS(B,A,NN,ICOMM,NPU)
      CALL MFFT235A(A,B,WX,NNY,NX,LNX)
      CALL ZTRANS(A,B,NNY,NX)
      RETURN
      END
